// Generated by CoffeeScript 1.4.0
(function() {
  var color_from_chars, draw_brat_tree, isNumber, make_entity_from_pos, make_relation_from_rel, webFontURLs;

  window.draw_deptree = function(sent, hover_fun) {
    var deprel_div, sent_id;
    if (hover_fun == null) {
      hover_fun = function() {};
    }
    sent_id = "magic_secret_id";
    deprel_div = $("<div>").attr("id", sent_id);
    $('body').empty().append(deprel_div);
    return draw_brat_tree(sent, sent_id, hover_fun);
  };

  window.sentence_xml_to_json = function(sent) {
    return _.map($(sent).children(), function(word) {
      var obj;
      obj = {
        word: word.textContent
      };
      _.map(["pos", "ref", "dephead", "deprel"], function(attr) {
        return obj[attr] = $(word).attr(attr);
      });
      return obj;
    });
  };

  $(document).ready(head.js);

  webFontURLs = ["lib/brat/static/fonts/Astloch-Bold.ttf", "lib/brat/static/fonts/PT_Sans-Caption-Web-Regular.ttf", "lib/brat/static/fonts/Liberation_Sans-Regular.ttf"];

  color_from_chars = function(w, sat_min, sat_max, lightness) {
    var color, hue, i, len, sat, v;
    v = 1.0;
    hue = 0.0;
    sat = 0.0;
    len = w.length;
    i = 0;
    while (i < len) {
      v = v / 26.0;
      sat += ((w.charCodeAt(i)) % 26) * v;
      hue += ((w.charCodeAt(i)) % 26) * (1.0 / 26 / len);
      i++;
    }
    hue = hue * 360;
    sat = sat * (sat_max - sat_min) + sat_min;
    color = $.Color({
      hue: hue,
      saturation: sat,
      lightness: lightness
    });
    return color.toHexString(0);
  };

  make_entity_from_pos = function(p) {
    return {
      type: p,
      labels: [p],
      bgColor: color_from_chars(p, 0.8, 0.95, 0.95),
      borderColor: "darken"
    };
  };

  make_relation_from_rel = function(r) {
    return {
      type: r,
      labels: [r],
      color: "#000000",
      args: [
        {
          role: "parent",
          targets: []
        }, {
          role: "child",
          targets: []
        }
      ]
    };
  };

  isNumber = function(n) {
    return (!isNaN(parseFloat(n))) && isFinite(n);
  };

  draw_brat_tree = function(words, to_div, hover_fun) {
    var add_word, added_pos, added_rel, collData, docData, entities, entity_types, ix, len, relation_types, relations, text, word, _i, _len;
    entity_types = [];
    relation_types = [];
    entities = [];
    relations = [];
    added_pos = [];
    added_rel = [];
    add_word = function(word, start, stop) {
      var attr, dephead, deprel, entity, pos, ref, relation, _ref;
      _ref = (function() {
        var _i, _len, _ref, _results;
        _ref = ["pos", "ref", "dephead", "deprel"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          _results.push(word[attr]);
        }
        return _results;
      })(), pos = _ref[0], ref = _ref[1], dephead = _ref[2], deprel = _ref[3];
      if (!_.contains(added_pos, pos)) {
        added_pos.push(pos);
        entity_types.push(make_entity_from_pos(pos));
      }
      if (!_.contains(added_rel, deprel)) {
        added_rel.push(deprel);
        relation_types.push(make_relation_from_rel(deprel));
      }
      entity = ["T" + ref, pos, [[start, stop]]];
      entities.push(entity);
      if (isNumber(dephead)) {
        relation = ["R" + ref, deprel, [["parent", "T" + dephead], ["child", "T" + ref]]];
        return relations.push(relation);
      }
    };
    text = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        _results.push(word.word);
      }
      return _results;
    })()).join(" ");
    ix = 0;
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      len = word.word.length;
      add_word(word, ix, ix + len);
      ix += len + 1;
    }
    collData = {
      entity_types: entity_types,
      relation_types: relation_types
    };
    docData = {
      text: text,
      entities: entities,
      relations: relations
    };
    return head.ready(function() {
      var dispatcher, div;
      dispatcher = Util.embed(to_div, collData, docData, webFontURLs);
      div = $("#" + to_div);
      return dispatcher.on('doneRendering', function() {
        _.map(div.find("g.arcs").children(), function(g) {
          var deprel;
          deprel = $(g).find("text").data("arc-role");
          return $(g).hover(function() {
            return hover_fun({
              deprel: deprel
            });
          });
        });
        return _.map(div.find("g.span text"), function(g) {
          var pos;
          pos = $(g).text();
          return $(g).parent().hover(function() {
            return hover_fun({
              pos: pos
            });
          });
        });
      });
    });
  };

}).call(this);
